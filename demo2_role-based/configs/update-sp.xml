<!--
  ~ Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://org.apache.axis2/xsd"
                  xmlns:xsd1="http://model.common.application.identity.carbon.wso2.org/xsd"
                  xmlns:xsd2="http://script.model.common.application.identity.carbon.wso2.org/xsd">
    <soapenv:Header/>
    <soapenv:Body>
        <xsd:updateApplication>
            <!--Optional:-->
            <xsd:serviceProvider>
                <!--Optional:-->
                <xsd1:applicationID>${APP_ID}</xsd1:applicationID>
                <!--Optional:-->
                <xsd1:applicationName>${SP_NAME}</xsd1:applicationName>
                <!--Optional:-->
                <xsd1:claimConfig>
                    <!--Optional:-->
                    <xsd1:alwaysSendMappedLocalSubjectId>false</xsd1:alwaysSendMappedLocalSubjectId>
                    <!--Optional:-->
                    <xsd1:localClaimDialect>true</xsd1:localClaimDialect>
                    <!--Optional:-->
                    <xsd1:roleClaimURI>http://wso2.org/claims/role</xsd1:roleClaimURI>
                </xsd1:claimConfig>
                <!--Optional:-->
                <xsd1:description>Sample service provider for ${SP_NAME} Web Application</xsd1:description>
                <!--Optional:-->
                <xsd1:inboundAuthenticationConfig>
                    <xsd1:inboundAuthenticationRequestConfigs>
                        <xsd1:inboundAuthKey>pickupApplicationClientId</xsd1:inboundAuthKey>
                        <xsd1:inboundAuthType>oauth2</xsd1:inboundAuthType>
                        <xsd1:properties>
                            <xsd1:name>oauthConsumerSecret</xsd1:name>
                            <xsd1:value>pickupApplicationClientSecret</xsd1:value>
                        </xsd1:properties>
                    </xsd1:inboundAuthenticationRequestConfigs>
                    <xsd1:inboundAuthenticationRequestConfigs>
                        <xsd1:inboundAuthKey>application_pickup</xsd1:inboundAuthKey>
                        <xsd1:inboundAuthType>passivests</xsd1:inboundAuthType>
                    </xsd1:inboundAuthenticationRequestConfigs>
                    <xsd1:inboundAuthenticationRequestConfigs>
                        <xsd1:inboundAuthKey>application_pickup</xsd1:inboundAuthKey>
                        <xsd1:inboundAuthType>openid</xsd1:inboundAuthType>
                    </xsd1:inboundAuthenticationRequestConfigs>
                </xsd1:inboundAuthenticationConfig>
                <!--Optional:-->
                <xsd1:inboundProvisioningConfig>
                    <!--Optional:-->
                    <xsd1:dumbMode>false</xsd1:dumbMode>
                    <!--Optional:-->
                    <xsd1:provisioningUserStore>PRIMARY</xsd1:provisioningUserStore>
                </xsd1:inboundProvisioningConfig>
                <!--Optional:-->
                <xsd1:localAndOutBoundAuthenticationConfig>
                    <!--Optional:-->
                    <xsd1:alwaysSendBackAuthenticatedListOfIdPs>false</xsd1:alwaysSendBackAuthenticatedListOfIdPs>
                    <!--Optional:-->
                    <xsd1:authenticationScriptConfig>
                        <!--Optional:-->
                        <xsd2:content>var rolesToStepUp = ['Admin_Role', 'Manager_Role'];&#xd;
  function onLoginRequest(context) {&#xd;
    executeStep(1, {&#xd;
        onSuccess: function(context) {&#xd;
            var user = context.currentKnownSubject;&#xd;
            var hasRole = hasAnyOfTheRoles(user, rolesToStepUp);&#xd;
&#xd;
            if (hasRole) {&#xd;
                executeStep(2);&#xd;
            } else {&#xd;
                executeStep(3);&#xd;
            }&#xd;
        }&#xd;
    });&#xd;
}</xsd2:content>
                        <!--Optional:-->
                        <xsd2:enabled>true</xsd2:enabled>
                    </xsd1:authenticationScriptConfig>
                    <!--Optional:-->
                    <xsd1:authenticationStepForAttributes/>
                    <!--Optional:-->
                    <xsd1:authenticationStepForSubject/>
                    <!--Zero or more repetitions:-->
                <xsd1:authenticationSteps>
                      <xsd1:attributeStep>true</xsd1:attributeStep>
                      <xsd1:localAuthenticatorConfigs>
                         <xsd1:displayName>identifier-first</xsd1:displayName>
                         <xsd1:enabled>false</xsd1:enabled>
                         <xsd1:name>IdentifierExecutor</xsd1:name>
                         <xsd1:valid>true</xsd1:valid>
                      </xsd1:localAuthenticatorConfigs>
                      <xsd1:stepOrder>1</xsd1:stepOrder>
                      <xsd1:subjectStep>true</xsd1:subjectStep>
                   </xsd1:authenticationSteps>
                   <xsd1:authenticationSteps>
                      <xsd1:attributeStep>false</xsd1:attributeStep>
                      <xsd1:localAuthenticatorConfigs>
                         <xsd1:displayName>basic</xsd1:displayName>
                         <xsd1:enabled>false</xsd1:enabled>
                         <xsd1:name>BasicAuthenticator</xsd1:name>
                         <xsd1:valid>true</xsd1:valid>
                      </xsd1:localAuthenticatorConfigs>
                      <xsd1:stepOrder>2</xsd1:stepOrder>
                      <xsd1:subjectStep>false</xsd1:subjectStep>
                   </xsd1:authenticationSteps>
                   <xsd1:authenticationSteps>
                      <xsd1:attributeStep>false</xsd1:attributeStep>
                      <xsd1:federatedIdentityProviders>
                         <xsd1:claimConfig/>
                         <xsd1:defaultAuthenticatorConfig>
                            <xsd1:displayName>GoogleIDP</xsd1:displayName>
                            <xsd1:enabled>false</xsd1:enabled>
                            <xsd1:name>GoogleOIDCAuthenticator</xsd1:name>
                            <xsd1:valid>true</xsd1:valid>
                         </xsd1:defaultAuthenticatorConfig>
                         <xsd1:defaultProvisioningConnectorConfig/>
                         <xsd1:enable>false</xsd1:enable>
                         <xsd1:federatedAuthenticatorConfigs>
                            <xsd1:displayName>GoogleIDP</xsd1:displayName>
                            <xsd1:enabled>false</xsd1:enabled>
                            <xsd1:name>GoogleOIDCAuthenticator</xsd1:name>
                            <xsd1:valid>true</xsd1:valid>
                         </xsd1:federatedAuthenticatorConfigs>
                         <xsd1:federationHub>false</xsd1:federationHub>
                         <xsd1:identityProviderName>GoogleIDP</xsd1:identityProviderName>
                         <xsd1:justInTimeProvisioningConfig/>
                         <xsd1:permissionAndRoleConfig/>
                         <xsd1:primary>false</xsd1:primary>
                      </xsd1:federatedIdentityProviders>
                      <xsd1:federatedIdentityProviders>
                         <xsd1:claimConfig/>
                         <xsd1:defaultAuthenticatorConfig>
                            <xsd1:displayName>FacebookIDP</xsd1:displayName>
                            <xsd1:enabled>false</xsd1:enabled>
                            <xsd1:name>FacebookAuthenticator</xsd1:name>
                            <xsd1:valid>true</xsd1:valid>
                         </xsd1:defaultAuthenticatorConfig>
                         <xsd1:defaultProvisioningConnectorConfig/>
                         <xsd1:enable>false</xsd1:enable>
                         <xsd1:federatedAuthenticatorConfigs>
                            <xsd1:displayName>FacebookIDP</xsd1:displayName>
                            <xsd1:enabled>false</xsd1:enabled>
                            <xsd1:name>FacebookAuthenticator</xsd1:name>
                            <xsd1:valid>true</xsd1:valid>
                         </xsd1:federatedAuthenticatorConfigs>
                         <xsd1:federationHub>false</xsd1:federationHub>
                         <xsd1:identityProviderName>FacebookIDP</xsd1:identityProviderName>
                         <xsd1:justInTimeProvisioningConfig/>
                         <xsd1:permissionAndRoleConfig/>
                         <xsd1:primary>false</xsd1:primary>
                      </xsd1:federatedIdentityProviders>
                      <xsd1:stepOrder>3</xsd1:stepOrder>
                      <xsd1:subjectStep>false</xsd1:subjectStep>
                   </xsd1:authenticationSteps>
                    <!--Optional:-->
                    <xsd1:authenticationType>flow</xsd1:authenticationType>
                    <!--Optional:-->
                    <xsd1:enableAuthorization>false</xsd1:enableAuthorization>
                    <!--Optional:-->
                    <xsd1:subjectClaimUri>http://wso2.org/claims/username</xsd1:subjectClaimUri>
                    <!--Optional:-->
                    <xsd1:useTenantDomainInLocalSubjectIdentifier>false</xsd1:useTenantDomainInLocalSubjectIdentifier>
                    <!--Optional:-->
                    <xsd1:useUserstoreDomainInLocalSubjectIdentifier>false</xsd1:useUserstoreDomainInLocalSubjectIdentifier>
                </xsd1:localAndOutBoundAuthenticationConfig>
                <!--Optional:-->
                <xsd1:outboundProvisioningConfig/>
                <!--Optional:-->
                <xsd1:owner>
                    <!--Optional:-->
                    <xsd1:tenantDomain>carbon.super</xsd1:tenantDomain>
                    <!--Optional:-->
                    <xsd1:userName>admin</xsd1:userName>
                    <!--Optional:-->
                    <xsd1:userStoreDomain>PRIMARY</xsd1:userStoreDomain>
                </xsd1:owner>
                <!--Optional:-->
                <xsd1:permissionAndRoleConfig/>
                <!--Optional:-->
                <xsd1:saasApp>true</xsd1:saasApp>
            </xsd:serviceProvider>
        </xsd:updateApplication>
    </soapenv:Body>
</soapenv:Envelope>
